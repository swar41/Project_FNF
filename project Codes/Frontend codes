// C:/Users/akars/OneDrive/Desktop/SwarPYCodes/Project_FNF/frontend_v3\api.js
import axios from 'axios'

const api = axios.create({ 
  baseURL: import.meta.env.VITE_API_BASE || 'http://localhost:5157/api',
  timeout: 10000
})

// // const apiBase = import.meta.env.VITE_API_URL || 'http://localhost:5157'
// const imgUrl = profile?.profilePicture
//   ? `${api.defaults.baseURL}/${profile.profilePicture}`
//   : null
// Request interceptor to add auth token
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('fnf_token')
    if (token) {
      config.headers.Authorization = `Bearer ${token}`
    }
    return config
  },
  (error) => {
    return Promise.reject(error)
  }
)

// Response interceptor to handle errors
api.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response?.status === 401) {
      // Clear auth and redirect to login
      localStorage.clear()
      window.location.href = '/login'
    }
    return Promise.reject(error)
  }
)

export default api

// C:/Users/akars/OneDrive/Desktop/SwarPYCodes/Project_FNF/frontend_v3\App.jsx
import React from 'react'
import { startSignalR } from "./signalr";
import { useEffect } from 'react'
import { getAuth } from './utils/auth'
import { Routes, Route, Navigate } from 'react-router-dom'
import Home from './pages/Home'
import Feed from './pages/Feed'
import PostDetails from './pages/PostDetails'
import NewPost from './pages/NewPost'
import Login from './pages/Login'
import Signup from './pages/Signup'
import Profile from './pages/Profile'
import EditPost from './pages/EditPost'
import ProfileEdit from './pages/profileEdit'
import Commits from './pages/Commits'
import { isAuthenticated } from './utils/auth'

function RequireAuth({ children }) {
  return isAuthenticated() ? children : <Navigate to="/login" replace />
}

function RequireGuest({ children }) {
  return !isAuthenticated() ? children : <Navigate to="/feed" replace />
}

export default function App() {
  useEffect(() => {
    const auth = getAuth();
    if (!auth?.token) return;

    const connection = startSignalR(auth.token);

    connection.on("ReceiveNotification", (data) => {
      console.log("üì¢ New commit:", data);
      alert(`Manager updated: ${data.CommitMessage}`);
      // TODO: optionally trigger refetch of /commits/mine
    });

    return () => {
      if (connection) connection.stop();
    };
  }, []);
  return (
    <Routes>
      <Route path="/" element={<Home />} />
      <Route path="/feed" element={<RequireAuth><Feed /></RequireAuth>} />

      <Route path="/post/:id" element={<PostDetails />} />
      <Route path="/edit/:id" element={<EditPost />} />
      <Route path="/new" element={<RequireAuth><NewPost /></RequireAuth>} />
      <Route path="/profile" element={<RequireAuth><Profile /></RequireAuth>} />
      <Route path="/profile/edit" element={<RequireAuth><ProfileEdit /></RequireAuth>} />
      <Route path="/commits" element={<RequireAuth><Commits /></RequireAuth>} />
      <Route path="/login" element={<RequireGuest><Login /></RequireGuest>} />
      <Route path="/signup" element={<RequireGuest><Signup /></RequireGuest>} />
      <Route path="*" element={<Navigate to="/" replace />} />
    </Routes>
  )
}

// C:/Users/akars/OneDrive/Desktop/SwarPYCodes/Project_FNF/frontend_v3\signalr.js
import * as signalR from "@microsoft/signalr";
import { getAuth } from "./utils/auth";
let connection = null;

export function startSignalR() {
  const auth = getAuth();
  if (!auth?.token) return;

  connection = new signalR.HubConnectionBuilder()
    .withUrl("http://localhost:5157/hubs/notifications", {
      accessTokenFactory: () => auth?.token || "",
      transport: signalR.HttpTransportType.WebSockets
    })
    .configureLogging(signalR.LogLevel.Information)
    .withAutomaticReconnect()
    .build();

  connection.start().catch(err => console.error("SignalR error:", err));

  return connection;
}

// C:/Users/akars/OneDrive/Desktop/SwarPYCodes/Project_FNF/frontend_v3\Components\Comments.jsx

import React, { useState, useEffect } from 'react'
import { useNavigate } from 'react-router-dom'
import api from '../api'
import dayjs from 'dayjs'
import { isAuthenticated } from '../utils/auth'

export default function Comments({ postId, canManagePost, auth }) {
  const [comments, setComments] = useState([])
  const [loading, setLoading] = useState(true)
  const [newComment, setNewComment] = useState('')
  const [submitting, setSubmitting] = useState(false)
  const navigate = useNavigate()

  useEffect(() => { fetchComments() }, [postId])

  async function fetchComments() {
    try {
      setLoading(true)
      const res = await api.get(`/comments/post/${postId}?hierarchical=true`)
      setComments(res.data)
    } catch { setComments([]) }
    finally { setLoading(false) }
  }

  async function submitComment() {
    if (!isAuthenticated()) return navigate('/login')
    if (!newComment.trim()) return
    try {
      setSubmitting(true)
      await api.post('/comments', { postId, commentText: newComment.trim() })
      setNewComment('')
      fetchComments()
    } finally { setSubmitting(false) }
  }

  return (
    <section className="card" style={{ marginTop: '2rem' }}>
      <h2>Comments ({comments.length})</h2>

      {isAuthenticated()
        ? <div style={{ marginBottom: '1rem' }}>
          <textarea
            rows={3}
            value={newComment}
            onChange={e => setNewComment(e.target.value)}
            placeholder="Write a comment..."
            style={{ width: '100%', marginBottom: '0.5rem' }}
          />
          <button className="btn"
            onClick={submitComment}
            disabled={submitting || !newComment.trim()}>
            {submitting ? 'Posting...' : 'Post Comment'}
          </button>
        </div>
        : <div className="card" style={{ textAlign: 'center' }}>
          <p>Login to comment</p>
          <button className="btn" onClick={() => navigate('/login')}>Login</button>
        </div>
      }

      {loading
        ? <p>Loading comments...</p>
        : comments.length === 0
          ? <p style={{ textAlign: 'center', color: '#6c757d' }}>No comments yet.</p>
          : comments.map(c => (
            <CommentItem
              key={c.commentId}
              comment={c}
              postId={postId}
              canManagePost={canManagePost}
              auth={auth}
              refresh={fetchComments}
            />
          ))
      }
    </section>
  )
}

function CommentItem({ comment, postId, canManagePost, auth, refresh }) {
  const [editing, setEditing] = useState(false)
  const [editText, setEditText] = useState(comment.commentText)
  const [replying, setReplying] = useState(false)
  const [replyText, setReplyText] = useState('')
  const navigate = useNavigate()

  async function handleDelete() {
    const msg = auth?.role === 'Manager'
      ? prompt('Enter commit message:')
      : 'User deleted own comment'
    if (!msg) return
    await api.delete(`/comments/${comment.commentId}?commitMessage=${encodeURIComponent(msg)}`)
    refresh()
  }

  async function handleUpdate() {
    const msg = auth?.role === 'Manager'
      ? prompt('Enter commit message:')
      : null
    if (auth?.role === 'Manager' && !msg) return
    await api.put(`/comments/${comment.commentId}${msg ? `?commitMessage=${encodeURIComponent(msg)}` : ''}`,
      { commentText: editText })
    setEditing(false)
    refresh()
  }

  async function handleReply() {
    if (!isAuthenticated()) return navigate('/login')
    if (!replyText.trim()) return
    await api.post('/comments', {
      postId,
      parentCommentId: comment.commentId,
      commentText: replyText.trim()
    })
    setReplyText('')
    setReplying(false)
    refresh()
  }

  // const isOwner = comment.userId === auth?.userId
  // const canEditDelete = canManagePost || isOwner

  return (
    <div className="comment" style={{ marginBottom: '1rem', paddingLeft: '1rem' }}>
      <div className="comment-header flex justify-between">
        <div>
          <strong>{comment.authorName}</strong>
          <span style={{ marginLeft: '0.5rem', fontSize: '0.75rem', color: '#6c757d' }}>
            {dayjs(comment.createdAt).fromNow()}
          </span>
        </div>
        {isAuthenticated() &&
          <div className="flex gap-2">
            <button className="btn btn-link" onClick={() => setEditing(true)}>‚úè Edit</button>
            <button className="btn btn-link" onClick={handleDelete}>üóë Delete</button>
          </div>
        }
      </div>

      <div className="comment-body">
        {editing
          ? <>
            <textarea value={editText} onChange={e => setEditText(e.target.value)}
              rows={2} style={{ width: '100%', marginBottom: '0.5rem' }} />
            <button className="btn btn-sm" onClick={handleUpdate}>Save</button>
            <button className="btn btn-link" onClick={() => setEditing(false)}>Cancel</button>
          </>
          : <p>{comment.commentText}</p>}
      </div>

      <div>
        <button className="btn btn-link" onClick={() => setReplying(!replying)}>üí¨ Reply</button>
      </div>

      {replying &&
        <div style={{ marginTop: '0.5rem', marginLeft: '1rem' }}>
          <textarea value={replyText} onChange={e => setReplyText(e.target.value)}
            rows={2} style={{ width: '100%', marginBottom: '0.5rem' }} />
          <button className="btn btn-sm" onClick={handleReply} disabled={!replyText.trim()}>Post Reply</button>
          <button className="btn btn-link" onClick={() => setReplying(false)}>Cancel</button>
        </div>
      }

      {comment.replies?.length > 0 &&
        <div style={{ marginLeft: '1rem', marginTop: '0.5rem' }}>
          {comment.replies.map(r => (
            <CommentItem
              key={r.commentId}
              comment={r}
              postId={postId}
              canManagePost={canManagePost}
              auth={auth}
              refresh={refresh}
            />
          ))}
        </div>
      }
    </div>
  )
}


// C:/Users/akars/OneDrive/Desktop/SwarPYCodes/Project_FNF/frontend_v3\Components\Navbar.jsx
import React, { useState } from 'react'
import { Link, useNavigate, useLocation } from 'react-router-dom'
import { logout, getAuth, isAuthenticated } from '../utils/auth'

export default function Navbar() {
  const [sidebarOpen, setSidebarOpen] = useState(false)
  const navigate = useNavigate()
  const location = useLocation()
  const auth = getAuth()
  const authenticated = isAuthenticated()

  function handleLogout() {
    logout()
    navigate('/login')
  }

  return (
    <>
      <header className="header">
        <div className="header-content">
          <Link to={authenticated ? "/feed" : "/"} className="logo">
            FNF Knowledge Hub
          </Link>

          {/* Desktop Navigation */}
          <nav className="nav-buttons">
            {authenticated ? (
              <>
                <Link to="/feed" className="btn btn-outline">Feed</Link>
                <Link to="/new" className="btn">New Post</Link>
                <Link to="/profile" className="btn btn-secondary">Profile</Link>
                <Link to="/commits" className="btn btn-secondary">Commits</Link>
                <button className="btn btn-secondary" onClick={handleLogout}>
                  Logout
                </button>
              </>
            ) : (
              <>
                <Link to="/login" className="btn btn-outline">Login</Link>
                <Link to="/signup" className="btn">Sign Up</Link>
              </>
            )}
          </nav>

          {/* Mobile Hamburger */}
          <button 
            className="hamburger"
            onClick={() => setSidebarOpen(true)}
          >
            ‚ò∞
          </button>
        </div>
      </header>

      {/* Mobile Sidebar */}
      {sidebarOpen && (
        <>
          <div 
            className="sidebar-overlay" 
            onClick={() => setSidebarOpen(false)}
          />
          <div className="mobile-sidebar open">
            <button 
              className="sidebar-close"
              onClick={() => setSidebarOpen(false)}
            >
              ‚úï
            </button>

            <div style={{ marginTop: '3rem' }}>
              <h3 style={{ marginBottom: '1rem' }}>Menu</h3>
              
              {authenticated ? (
                <div className="flex flex-col gap-2">
                  <Link 
                    to="/feed" 
                    className="btn"
                    onClick={() => setSidebarOpen(false)}
                  >
                    Feed
                  </Link>
                  <Link 
                    to="/new" 
                    className="btn"
                    onClick={() => setSidebarOpen(false)}
                  >
                    New Post
                  </Link>
                  <Link 
                    to="/profile" 
                    className="btn btn-secondary"
                    onClick={() => setSidebarOpen(false)}
                  >
                    My Profile
                  </Link>
                  <Link 
                    to="/commits" 
                    className="btn btn-secondary"
                    onClick={() => setSidebarOpen(false)}
                  >
                    Commits
                  </Link>
                  <button 
                    className="btn btn-secondary" 
                    onClick={handleLogout}
                  >
                    Logout
                  </button>
                </div>
              ) : (
                <div className="flex flex-col gap-2">
                  <Link 
                    to="/login" 
                    className="btn btn-outline"
                    onClick={() => setSidebarOpen(false)}
                  >
                    Login
                  </Link>
                  <Link 
                    to="/signup" 
                    className="btn"
                    onClick={() => setSidebarOpen(false)}
                  >
                    Sign Up
                  </Link>
                </div>
              )}
            </div>
          </div>
        </>
      )}
    </>
  )
}

// C:/Users/akars/OneDrive/Desktop/SwarPYCodes/Project_FNF/frontend_v3\Components\PostCard.jsx
import React from 'react';
import { Link } from 'react-router-dom';
import dayjs from 'dayjs';
import relativeTime from 'dayjs/plugin/relativeTime';

dayjs.extend(relativeTime);

export default function PostCard({ post }) {
  const truncateContent = (text, maxLength = 200) => {
    if (!text) return '';
    return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;
  };

  function getPreview(body) {
  if (!body) return 'No content available';

  try {
    const blocks = JSON.parse(body);
    if (Array.isArray(blocks)) {
      const textBlocks = blocks
        .filter(b => b.type === 'text' && b.content && b.content.trim());

      let previewText = textBlocks.slice(0, 2).map(b => b.content.trim()).join(' ');

      // If only one text block and there's a code block after it, add a hint
      if (textBlocks.length < 2) {
        const hasCodeBlock = blocks.find(b => b.type === 'code');
        if (hasCodeBlock) {
          previewText += ' [Contains code snippet]';
        }
      }

      return previewText || 'No content available';
    }

    return 'No content available';
  } catch {
    return body.trim() || 'No content available';
  }
}

  const preview =
  post.bodyPreview ||
  post.content ||
  truncateContent(getPreview(post.body), 200) ||
  'No content available';

  return (
    <div className="post-card">
      {post.isRepost && (
        <div style={{ fontSize: '0.85rem', color: '#6c757d', marginBottom: '0.5rem' }}>
          üîÑ Reposted by {post.repostedBy}
        </div>
      )}

      <Link to={`/post/${post.postId || post.id}`} className="post-title">
        {post.title || 'Untitled Post'}
      </Link>

      <div className="post-preview">{preview}</div>

      {post.tags && post.tags.length > 0 && (
        <div style={{ marginBottom: '1rem' }}>
          {post.tags.map((tag, index) => (
            <span key={index} className="tag">
              {tag}
            </span>
          ))}
        </div>
      )}

      <div className="post-meta">
        <div>
          <strong>{post.authorName || post.author || 'Unknown Author'}</strong>
          {(post.department || post.dept) && <span> ‚Ä¢ {post.department || post.dept}</span>}
          <div style={{ fontSize: '0.75rem', color: '#6c757d' }}>
            {dayjs(post.createdAt || post.datetime).fromNow()}
          </div>
        </div>

        <div className="post-stats">
          <span title="Upvotes">‚ñ≤ {post.upvoteCount || post.upvotes || 0}</span>
          <span title="Downvotes">‚ñº {post.downvoteCount || post.downvotes || 0}</span>
          <span title="Comments">üí¨ {post.commentsCount ?? post.comments?.length ?? 0}</span>
        </div>
      </div>
    </div>
  );
}

// C:/Users/akars/OneDrive/Desktop/SwarPYCodes/Project_FNF/frontend_v3\Components\GuestPage\GuestPage.jsx
import React, { useEffect } from "react";
import { useNavigate } from "react-router-dom";
import "./GuestPage.css"; 

const posts = [
  {
    title: "How to connect to company VPN",
    content:
      "Step-by-step: open VPN client, add server address, use corporate credentials. If MFA enabled, approve on your device. Troubleshoot: check firewall, DNS, and certificates.",
    tags: ["VPN", "IT"],
    dept: "Dept-4",
    updates: 12,
    downvotes: 0,
    datetime: "19-9-2025, 10:51:21 pm",
  },
  {
    title: "How to raise leave request",
    content:
      "Open HR portal ‚Üí My Requests ‚Üí New Leave. Select dates, reason and approver. Attach docs if needed. Manager gets a notification.",
    tags: ["HR", "Leave"],
    dept: "Dept-6",
    updates: 8,
    downvotes: 0,
    datetime: "19-9-2025, 10:57:11 pm",
  },
  {
    title: "Setup local SQL Server",
    content:
      "Install SQL Server Express, enable TCP/IP, create SQL auth user and update connection string in appsettings.json.",
    tags: ["SQL", "Server"],
    dept: "Dept-6",
    updates: 10,
    downvotes: 0,
    datetime: "19-9-2025, 11:11:43 pm",
  },
];

function GuestPage() {
  const navigate = useNavigate();

  useEffect(() => {
    const token = localStorage.getItem("token");
    if (token) {
      navigate("/feed", { replace: true });
    }
  }, [navigate]);

  return (
    <div className="guest-page">
      {/* Header Section */}
      <header className="header-container">
        <div className="top-nav">
          <div className="nav-left">
            <div className="logo-container">
              <img src="/public/resouces/Screenshot 2025-09-24 103516.png"></img>
            </div>
          </div>
          <div className="nav-right">
            <button className="nav-btn" onClick={() => navigate("/signup")}>
              Sign Up
            </button>
            <button className="nav-btn" onClick={() => navigate("/login")}>
              Login
            </button>
          </div>
        </div>
      </header>

      {/* Welcome Section */}
      <section className="guest-header">
        <h1>Welcome to FNF Knowledge Hub</h1>
        {/* <p>Please login or sign up to continue.</p> */}
      </section>

      {/* QnAHub Section */}
      <div className="qna-container">
        {/* <h2 className="qna-header">FNF Knowledge Hub</h2>
        <div className="qna-helptext">You may view up to 3 posts. Viewed: 1.</div> */}
        {posts.map((p, idx) => (
          <div className="qna-post" key={idx}>
            <div className="qna-title">{p.title}</div>
            <div className="qna-content">{p.content}</div>
            <div className="qna-meta">
              {p.tags.map((tag) => (
                <span className="qna-tag" key={tag}>{tag}</span>
              ))}
              <span className="qna-dept">{p.dept}</span>
            </div>
            <div className="qna-footer">
              <span className="qna-updates">
                Updates: {p.updates} ‚Ä¢ Downvotes: {p.downvotes} ‚Ä¢ {p.datetime}
              </span>
              <button className="qna-btn">Read More</button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

export default GuestPage;


// C:/Users/akars/OneDrive/Desktop/SwarPYCodes/Project_FNF/frontend_v3\pages\Commits.jsx
// src/pages/Commits.jsx

import React, { useEffect, useState } from 'react'
import { Link } from 'react-router-dom'
import api from '../api'
import Navbar from '../Components/Navbar'
import dayjs from 'dayjs'
import relativeTime from 'dayjs/plugin/relativeTime'

dayjs.extend(relativeTime)

export default function Commits() {
  const [commits, setCommits] = useState([])
  const [loading, setLoading] = useState(true)
  const [filter, setFilter] = useState('all') // all, approved, pending, rejected

  useEffect(() => {
    fetchCommits()
  }, [])

  async function fetchCommits() {
    try {
      setLoading(true)
      const response = await api.get('/commits/mine')
      setCommits(response.data)
    } catch (error) {
      console.error('Failed to fetch commits:', error)
      setCommits([])
    } finally {
      setLoading(false)
    }
  }

  const getStatusColor = (status) => {
    switch (status?.toLowerCase()) {
      case 'approved': return '#28a745'
      case 'rejected': return '#dc3545'
      case 'pending': return '#ffc107'
      default: return '#6c757d'
    }
  }

  const getStatusIcon = (status) => {
    switch (status?.toLowerCase()) {
      case 'approved': return '‚úÖ'
      case 'rejected': return '‚ùå'
      case 'pending': return '‚è≥'
      default: return 'üìù'
    }
  }

  const filteredCommits = commits.filter(commit => {
    if (filter === 'all') return true
    return commit.status?.toLowerCase() === filter
  })

  if (loading) {
    return (
      <div>
        <Navbar />
        <div className="container loading">
          <p>Loading commits...</p>
        </div>
      </div>
    )
  }

  return (
    <div>
      <Navbar />
      
      <main className="container" style={{ marginTop: '2rem' }}>
        <div className="flex justify-between items-center" style={{ marginBottom: '2rem' }}>
          <div>
            <h1>Your Commits</h1>
            <p style={{ color: '#6c757d' }}>
              Track your contributions and knowledge updates
            </p>
          </div>
        </div>

        {/* Summary Cards */}
        <div style={{ 
          display: 'grid', 
          gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', 
          gap: '1rem',
          marginBottom: '2rem'
        }}>
          <div className="card" style={{ textAlign: 'center' }}>
            <h3 style={{ color: '#007bff', fontSize: '2rem', marginBottom: '0.5rem' }}>
              {commits.length}
            </h3>
            <p style={{ color: '#6c757d' }}>Total Commits</p>
          </div>
          
          <div className="card" style={{ textAlign: 'center' }}>
            <h3 style={{ color: '#28a745', fontSize: '2rem', marginBottom: '0.5rem' }}>
              {commits.filter(c => c.status?.toLowerCase() === 'approved').length}
            </h3>
            <p style={{ color: '#6c757d' }}>Approved</p>
          </div>
          
          <div className="card" style={{ textAlign: 'center' }}>
            <h3 style={{ color: '#ffc107', fontSize: '2rem', marginBottom: '0.5rem' }}>
              {commits.filter(c => c.status?.toLowerCase() === 'pending').length}
            </h3>
            <p style={{ color: '#6c757d' }}>Pending Review</p>
          </div>
          
          <div className="card" style={{ textAlign: 'center' }}>
            <h3 style={{ color: '#dc3545', fontSize: '2rem', marginBottom: '0.5rem' }}>
              {commits.filter(c => c.status?.toLowerCase() === 'rejected').length}
            </h3>
            <p style={{ color: '#6c757d' }}>Rejected</p>
          </div>
        </div>

        {/* Filters */}
        <div className="card">
          <div className="flex gap-2" style={{ marginBottom: '1rem' }}>
            <button 
              className={`btn ${filter === 'approved' ? '' : 'btn-outline'}`}
              onClick={() => setFilter('approved')}
            >
              Approved ({commits.filter(c => c.status?.toLowerCase() === 'approved').length})
            </button>
            <button 
              className={`btn ${filter === 'pending' ? '' : 'btn-outline'}`}
              onClick={() => setFilter('pending')}
            >
              Pending ({commits.filter(c => c.status?.toLowerCase() === 'pending').length})
            </button>
            <button 
              className={`btn ${filter === 'rejected' ? '' : 'btn-outline'}`}
              onClick={() => setFilter('rejected')}
            >
              Rejected ({commits.filter(c => c.status?.toLowerCase() === 'rejected').length})
            </button>
            <button
              className={`btn ${filter === 'all' ? '' : 'btn-outline'}`}
              onClick={() => setFilter('all')}
            >
              All ({commits.length})
            </button>
          </div>

          {/* Commits List */}
          {filteredCommits.length === 0 ? (
            <div style={{ textAlign: 'center', padding: '3rem' }}>
              <h3>No commits found</h3>
              <p style={{ color: '#6c757d' }}>
                {filter === 'all' 
                  ? "You haven't made any commits yet. Start contributing to knowledge posts!"
                  : `No ${filter} commits found.`
                }
              </p>
            </div>
          ) : (
            <div>
              {filteredCommits.map(commit => (
                <div key={commit.commitId} className="card" style={{ marginBottom: '1rem' }}>
                  <div className="flex justify-between items-start">
                    <div style={{ flex: 1 }}>
                      <div className="flex items-center gap-2" style={{ marginBottom: '0.5rem' }}>
                        <span style={{ fontSize: '1.2rem' }}>
                          {getStatusIcon(commit.status)}
                        </span>
                        <span 
                          style={{ 
                            fontSize: '0.85rem',
                            color: getStatusColor(commit.status),
                            fontWeight: 'bold',
                            textTransform: 'uppercase'
                          }}
                        >
                          {commit.status || 'Draft'}
                        </span>
                      </div>
                      
                      <h4 style={{ marginBottom: '0.5rem' }}>
                        <Link to={`/post/${commit.postId}`} style={{ color: '#333' }}>
                          {commit.postTitle || `Post #${commit.postId}`}
                        </Link>
                      </h4>
                      
                      <p style={{ color: '#6c757d', marginBottom: '0.5rem' }}>
                        {commit.message || 'No commit message provided'}
                      </p>
                      
                      <div style={{ fontSize: '0.85rem', color: '#6c757d' }}>
                        <div>
                          Reviewed by: {commit.manager?.user?.fullName || commit.managerName || 'Pending manager assignment'}
                        </div>
                        <div>
                          {dayjs(commit.createdAt).format('MMMM D, YYYY at h:mm A')} 
                          <span style={{ marginLeft: '0.5rem' }}>
                            ({dayjs(commit.createdAt).fromNow()})
                          </span>
                        </div>
                      </div>
                    </div>
                    
                    <div className="flex gap-2">
                      <Link to={`/post/${commit.postId}`} className="btn btn-outline" style={{ fontSize: '0.8rem' }}>
                        View Post
                      </Link>
                    </div>
                  </div>
                  
                  {/* Feedback */}
                  {commit.feedback && (
                    <div style={{ 
                      marginTop: '1rem', 
                      padding: '0.75rem', 
                      background: '#f8f9fa', 
                      borderRadius: '4px',
                      borderLeft: `4px solid ${getStatusColor(commit.status)}`
                    }}>
                      <strong style={{ fontSize: '0.85rem' }}>Manager Feedback:</strong>
                      <p style={{ margin: '0.25rem 0 0 0', fontSize: '0.9rem' }}>
                        {commit.feedback}
                      </p>
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>
      </main>
    </div>
  )
}

// C:/Users/akars/OneDrive/Desktop/SwarPYCodes/Project_FNF/frontend_v3\pages\EditPost.jsx
import React, { useState, useEffect } from 'react'
import { useParams, useNavigate } from 'react-router-dom'
import api from '../api'
import Navbar from '../Components/Navbar'
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'
import { getAuth } from '../utils/auth'

export default function EditPost() {
  const { id } = useParams()
  const navigate = useNavigate()
  const [title, setTitle] = useState('')
  const [blocks, setBlocks] = useState([])
  const [input, setInput] = useState('')
  const [isCode, setIsCode] = useState(false)
  const [tags, setTags] = useState([])
  const [tagInput, setTagInput] = useState('')
  const [files, setFiles] = useState([])
  const [loading, setLoading] = useState(true)
  const [submitting, setSubmitting] = useState(false)
  const auth = getAuth()

  useEffect(() => { fetchPost() }, [id])

  async function fetchPost() {
    try {
      setLoading(true)
      const res = await api.get(`/posts/${id}`)
      const data = res.data
      setTitle(data.title)
      try {
        const bodyBlocks = typeof data.body === 'string' ? JSON.parse(data.body) : data.body
        setBlocks(Array.isArray(bodyBlocks) ? bodyBlocks : [{ type: 'text', content: data.body }])
      } catch {
        setBlocks([{ type: 'text', content: data.body }])
      }
      setTags(data.tags || [])
    } catch (err) {
      console.error('Failed to load post:', err)
      navigate('/feed')
    } finally { setLoading(false) }
  }

  function addBlock() {
    if (!input.trim()) return
    const newBlock = isCode
      ? { type: 'code', content: input }
      : { type: 'text', content: input }
    setBlocks([...blocks, newBlock])
    setInput('')
  }

  function removeBlock(idx) {
    setBlocks(blocks.filter((_, i) => i !== idx))
  }

  function handleFileChange(e) {
    const selectedFiles = Array.from(e.target.files)
    setFiles(selectedFiles)
  }

  function addTag(tag) {
    if (!tags.includes(tag)) setTags([...tags, tag])
    setTagInput('')
  }

  function removeTag(tag) {
    setTags(tags.filter(t => t !== tag))
  }

  async function handleSubmit(e) {
    e.preventDefault()
    if (!title.trim() || blocks.length === 0) {
      alert('Please fill title and content')
      return
    }

    try {
      setSubmitting(true)
      const msg = auth?.role === 'Manager' ? prompt('Enter commit message:') : null
      if (auth?.role === 'Manager' && !msg) return

      // APPROACH 1: Send as pure JSON
      const payload = {
        title: title.trim(),
        body: JSON.stringify(blocks),
        tags: tags
      }

      const url = `/posts/${id}${msg ? `?commitMessage=${encodeURIComponent(msg)}` : ''}`
      
      // Send JSON data
      await api.put(url, payload, {
        headers: {
          'Content-Type': 'application/json'
        }
      })

      // If there are files, upload them separately
      if (files.length > 0) {
        const formData = new FormData()
        files.forEach(f => formData.append('files', f))
        
        await api.post(`/posts/${id}/attachments`, formData, {
          headers: {
            'Content-Type': 'multipart/form-data'
          }
        })
      }

      alert('Post updated!')
      navigate(`/post/${id}`)
    } catch (err) {
      console.error('Failed to update post:', err)
      console.error('Error details:', err.response?.data)
      alert(`Failed to update post: ${err.response?.data?.message || err.message}`)
    } finally {
      setSubmitting(false)
    }
  }

  if (loading) return <><Navbar /><div className="container">Loading post...</div></>

  return (
    <div>
      <Navbar />
      <main className="container" style={{ marginTop: '2rem' }}>
        <h1>Edit Post</h1>
        <form onSubmit={handleSubmit} className="card">
          <label>Title *</label>
          <input
            type="text"
            value={title}
            onChange={e => setTitle(e.target.value)}
            maxLength={200}
            required
          />

          <label style={{ marginTop: '1rem' }}>Content *</label>
          <textarea
            rows={6}
            placeholder={isCode ? 'Write code here...' : 'Write text here...'}
            value={input}
            onChange={e => setInput(e.target.value)}
          />
          <div className="flex gap-2" style={{ marginTop: '0.5rem' }}>
            <button type="button" className="btn btn-outline" onClick={() => setIsCode(!isCode)}>
              {isCode ? 'Switch to Text' : 'Add Code Snippet'}
            </button>
            <button type="button" className="btn" onClick={addBlock}>Add Block</button>
          </div>

          {blocks.length > 0 && (
            <div className="card" style={{ background: '#f8f9fa', marginTop: '1rem' }}>
              {blocks.map((b, i) =>
                b.type === 'code' ? (
                  <div key={i} style={{ marginBottom: '1rem' }}>
                    <SyntaxHighlighter language="javascript" showLineNumbers>{b.content}</SyntaxHighlighter>
                    <button type="button" className="btn btn-secondary" onClick={() => removeBlock(i)}>Remove</button>
                  </div>
                ) : (
                  <div key={i} style={{ marginBottom: '0.5rem' }}>
                    <p>{b.content}</p>
                    <button type="button" className="btn btn-secondary" onClick={() => removeBlock(i)}>Remove</button>
                  </div>
                )
              )}
            </div>
          )}

          <label style={{ marginTop: '1rem' }}>Tags</label>
          <input
            type="text"
            placeholder="Enter tag"
            value={tagInput}
            onChange={e => setTagInput(e.target.value)}
          />
          <button type="button" className="btn btn-sm" onClick={() => addTag(tagInput)}>Add Tag</button>
          <div style={{ marginTop: '0.5rem' }}>
            {tags.map((t, i) => (
              <span key={i} className="tag">
                {t}{' '}
                <button type="button" onClick={() => removeTag(t)}>‚úñ</button>
              </span>
            ))}
          </div>

          <label style={{ marginTop: '1rem' }}>Attachments</label>
          <input type="file" multiple onChange={handleFileChange} />
          {files.length > 0 && (
            <ul>{files.map((f, i) => <li key={i}>{f.name}</li>)}</ul>
          )}

          <button
            type="submit"
            className="btn"
            disabled={submitting}
            style={{ marginTop: '1rem' }}
          >
            {submitting ? 'Updating...' : 'Save Changes'}
          </button>
        </form>
      </main>
    </div>
  )
}

// C:/Users/akars/OneDrive/Desktop/SwarPYCodes/Project_FNF/frontend_v3\pages\Feed.jsx


import React, { useEffect, useState } from 'react'
import { useNavigate, useSearchParams } from 'react-router-dom'
import api from '../api'
import Navbar from '../Components/Navbar'
import PostCard from '../Components/PostCard'

export default function Feed() {
  const [posts, setPosts] = useState([])
  const [loading, setLoading] = useState(true)
  const [tag, setTag] = useState('')
  const [tagSuggestions, setTagSuggestions] = useState([])
  const [dept, setDept] = useState('')
  const [departments, setDepartments] = useState([])
  const [searchParams] = useSearchParams()
  const navigate = useNavigate()

  const isMine = searchParams.get('mine') === 'true'

  useEffect(() => {
    fetchDepartments()
    fetchFeed()
  }, [tag, dept, isMine])

  async function fetchDepartments() {
    try {
      const res = await api.get('/categories')
      const data = res.data
      setDepartments(data.$values ? data.$values : Array.isArray(data) ? data : [])
    } catch (e) {
      console.error('Failed to fetch departments:', e)
      setDepartments([])
    }
  }

  async function fetchFeed() {
    try {
      setLoading(true)
      const params = new URLSearchParams()
      if (dept) params.set('deptId', dept)
      if (tag) params.set('tag', tag)
      if (isMine) params.set('mine', 'true')

      const endpoint = isMine ? '/posts/mine' : '/posts/feed'
      const res = await api.get(`${endpoint}?${params.toString()}`)
      setPosts(Array.isArray(res.data) ? res.data : (res.data.$values || []))
    } catch (e) {
      console.error('Failed to fetch posts:', e)
      setPosts([])
    } finally {
      setLoading(false)
    }
  }

  async function fetchTagSuggestions(query) {
    if (!query) return setTagSuggestions([])
    try {
      const res = await api.get(`/tags${dept ? `?deptId=${dept}` : ''}`)
      const allTags = res.data.$values ? res.data.$values : res.data
      const filtered = allTags.filter(t => t.tagName.toLowerCase().includes(query.toLowerCase()))
      setTagSuggestions(filtered)
    } catch {
      setTagSuggestions([])
    }
  }

  function handleSearch(e) {
    e.preventDefault()
    fetchFeed()
  }

  return (
    <div>
      <Navbar />
      <main className="container" style={{ marginTop: '2rem' }}>
        {/* Page Header */}
        <div className="flex justify-between items-center" style={{ marginBottom: '2rem' }}>
          <h1>{isMine ? 'My Posts' : 'Knowledge Feed'}</h1>
          <button className="btn" onClick={() => navigate('/new')}>
            + New Post
          </button>
        </div>

        {/* Search and Filters */}
        <form onSubmit={handleSearch} className="card" style={{ position: 'relative' }}>
          <div className="search-filters">
            <div style={{ position: 'relative', flex: 1 }}>
              <input
                type="text"
                placeholder="Search tags..."
                value={tag}
                onChange={e => {
                  const value = e.target.value
                  setTag(value)
                  fetchTagSuggestions(value)
                }}
              />
              {tagSuggestions.length > 0 && (
                <ul style={{
                  background: '#fff',
                  border: '1px solid #ddd',
                  borderRadius: '4px',
                  marginTop: '0.25rem',
                  maxHeight: '200px',
                  overflowY: 'auto',
                  position: 'absolute',
                  zIndex: 1000,
                  width: '100%'
                }}>
                  {tagSuggestions.map(s => (
                    <li key={s.tagId} style={{ padding: '0.5rem', cursor: 'pointer' }}
                      onClick={() => { setTag(s.tagName); setTagSuggestions([]); fetchFeed() }}>
                      {s.tagName}
                    </li>
                  ))}
                </ul>
              )}
            </div>

            <select value={dept} onChange={e => setDept(e.target.value)}>
              <option value="">All Departments</option>
              {departments.map(d => (
                <option key={d.deptId} value={d.deptId}>{d.deptName}</option>
              ))}
            </select>

            <button type="submit" className="btn" style={{ minWidth: 'auto', padding: '0.75rem 1.5rem' }}>
              Search
            </button>
          </div>
        </form>

        {/* Filter Tabs */}
        <div className="flex gap-2" style={{ marginBottom: '2rem' }}>
          <button className={`btn ${!isMine ? '' : 'btn-outline'}`} onClick={() => navigate('/feed')}>All Posts</button>
          <button className={`btn ${isMine ? '' : 'btn-outline'}`} onClick={() => navigate('/feed?mine=true')}>My Posts</button>
        </div>

        {/* Posts */}
        {loading ? (
          <div className="loading"><p>Loading posts...</p></div>
        ) : posts.length === 0 ? (
          <div className="card" style={{ textAlign: 'center', padding: '3rem' }}>
            <h3>{isMine ? 'No posts created yet' : 'No posts found'}</h3>
            <p style={{ color: '#6c757d', marginBottom: '1rem' }}>
              {isMine ? 'Create your first post to share knowledge with your team.' : 'Try adjusting your search filters or create a new post.'}
            </p>
            <button className="btn" onClick={() => navigate('/new')}>Create Post</button>
          </div>
        ) : (
          <div>{posts.map(p => <PostCard key={p.postId} post={p} />)}</div>
        )}
      </main>
    </div>
  )
}


// C:/Users/akars/OneDrive/Desktop/SwarPYCodes/Project_FNF/frontend_v3\pages\Home.jsx
import React, { useEffect, useState } from 'react'
import { useNavigate } from 'react-router-dom'
import { isAuthenticated } from '../utils/auth'
import Navbar from '../Components/Navbar'
import PostCard from '../Components/PostCard'

// Mock data for guest users
const samplePosts = [
  {
    id: '1',
    title: 'How to connect to company VPN',
    content: 'Step-by-step: open VPN client, add server address, use corporate credentials. If MFA enabled, approve on your device. Troubleshoot: check firewall, DNS, and certificates.',
    tags: ['VPN', 'IT', 'Security'],
    dept: 'IT Department',
    authorName: 'John Smith',
    updates: 12,
    downvotes: 0,
    comments: 3,
    createdAt: '2025-09-19T22:51:21Z'
  },
  {
    id: '2',
    title: 'How to raise leave request',
    content: 'Open HR portal ‚Üí My Requests ‚Üí New Leave. Select dates, reason and approver. Attach docs if needed. Manager gets a notification.',
    tags: ['HR', 'Leave', 'Process'],
    dept: 'HR Department',
    authorName: 'Sarah Johnson',
    updates: 8,
    downvotes: 0,
    comments: 5,
    createdAt: '2025-09-19T22:57:11Z'
  },
  {
    id: '3',
    title: 'Setup local SQL Server',
    content: 'Install SQL Server Express, enable TCP/IP, create SQL auth user and update connection string in appsettings.json. Remember to configure firewall rules.',
    tags: ['SQL', 'Server', 'Development'],
    dept: 'Development',
    authorName: 'Mike Chen',
    updates: 10,
    downvotes: 1,
    comments: 7,
    createdAt: '2025-09-19T23:11:43Z'
  },
  {
    id: '4',
    title: 'Best practices for code reviews',
    content: 'Always review for functionality, security, and maintainability. Use automated tools, focus on logic and potential bugs, provide constructive feedback.',
    tags: ['Code Review', 'Best Practices', 'Development'],
    dept: 'Development',
    authorName: 'Emily Davis',
    updates: 15,
    downvotes: 0,
    comments: 12,
    createdAt: '2025-09-20T09:30:00Z'
  }
]

export default function Home() {
  const navigate = useNavigate()
  const [viewedCount, setViewedCount] = useState(0)
  const maxViewsForGuest = 3

  useEffect(() => {
    if (isAuthenticated()) {
      navigate('/feed', { replace: true })
    }
  }, [navigate])

  const handlePostClick = (postId) => {
    if (viewedCount >= maxViewsForGuest) {
      navigate('/login')
      return
    }
    setViewedCount(prev => prev + 1)
    navigate(`/post/${postId}`)
  }

  return (
    <div>
      <Navbar />
      
      {/* Hero Section */}
      <section className="guest-hero">
        <div className="container">
          <h1>Welcome to FNF Knowledge Hub</h1>
          <p>Discover solutions, share knowledge, and collaborate with your team</p>
        </div>
      </section>

      {/* Main Content */}
      <main className="container">
        <div style={{ marginBottom: '2rem' }}>
          <h2>Recent Knowledge Posts</h2>
          {viewedCount < maxViewsForGuest ? (
            <p style={{ color: '#6c757d', fontSize: '0.9rem' }}>
              You can view {maxViewsForGuest - viewedCount} more post{maxViewsForGuest - viewedCount !== 1 ? 's' : ''} as a guest. 
              <a href="/signup" style={{ marginLeft: '0.5rem' }}>Sign up</a> for unlimited access.
            </p>
          ) : (
            <div className="card" style={{ textAlign: 'center', background: '#f8f9fa' }}>
              <h3>Guest View Limit Reached</h3>
              <p>You've reached the maximum number of posts you can view as a guest.</p>
              <div className="flex gap-2" style={{ justifyContent: 'center', marginTop: '1rem' }}>
                <button className="btn" onClick={() => navigate('/signup')}>
                  Sign Up for Free
                </button>
                <button className="btn btn-outline" onClick={() => navigate('/login')}>
                  Login
                </button>
              </div>
            </div>
          )}
        </div>

        <div>
          {samplePosts.map(post => (
            <div key={post.id} onClick={() => handlePostClick(post.id)} style={{ cursor: 'pointer' }}>
              <PostCard post={post} />
            </div>
          ))}
        </div>

        {/* Call to Action */}
        <div className="card" style={{ textAlign: 'center', marginTop: '2rem', background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)', color: 'white' }}>
          <h3 style={{ color: 'white' }}>Join FNF Knowledge Hub Today</h3>
          <p>Access unlimited posts, create your own content, and collaborate with your team.</p>
          <div className="flex gap-2" style={{ justifyContent: 'center', marginTop: '1rem' }}>
            <button className="btn" style={{ background: 'white', color: '#333' }} onClick={() => navigate('/signup')}>
              Get Started
            </button>
          </div>
        </div>
      </main>
    </div>
  )
}


// C:/Users/akars/OneDrive/Desktop/SwarPYCodes/Project_FNF/frontend_v3\pages\Login.jsx

import React, { useState } from 'react'
import { Link, useNavigate, useLocation } from 'react-router-dom'
import api from '../api'
import { saveAuth } from '../utils/auth'
import Navbar from '../Components/Navbar'

export default function Login() {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')
  const navigate = useNavigate()
  const location = useLocation()

  const from = location.state?.from?.pathname || '/feed'

  async function handleSubmit(e) {
    e.preventDefault()
    setError('')

    if (!email.trim() || !password.trim()) {
      setError('Please fill in all fields')
      return
    }

    try {
      setLoading(true)
      const response = await api.post('/auth/login', { 
        email: email.trim(), 
        password : password.trim(),
      
      })

      saveAuth(response.data)
      navigate(from, { replace: true })
    } catch (error) {
      console.error('Login failed:', error)
      if (error.response?.status === 401) {
        setError('Invalid email or password')
      } else if (error.response?.status === 400) {
        setError('Please check your credentials')
      } else {
        setError('Login failed. Please try again.')
      }
    } finally {
      setLoading(false)
    }
  }

  return (
    <div>
      <Navbar />
      
      <main className="container" style={{ marginTop: '4rem' }}>
        <div style={{ maxWidth: '400px', margin: '0 auto' }}>
          <div className="card">
            <div style={{ textAlign: 'center', marginBottom: '2rem' }}>
              <h1>Welcome </h1>
              <p style={{ color: '#6c757d' }}>Sign in to your account</p>
            </div>

            {error && (
              <div style={{ 
                background: '#f8d7da', 
                color: '#721c24', 
                padding: '0.75rem', 
                borderRadius: '4px', 
                marginBottom: '1rem',
                border: '1px solid #f5c6cb'
              }}>
                {error}
              </div>
            )}

            <form onSubmit={handleSubmit}>
              <div style={{ marginBottom: '1rem' }}>
                <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: 'bold' }}>
                  Email Address
                </label>
                <input
                  type="email"
                  value={email}
                  onChange={e => setEmail(e.target.value)}
                  placeholder="Enter your email"
                  required
                  disabled={loading}
                />
              </div>

              <div style={{ marginBottom: '1.5rem' }}>
                <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: 'bold' }}>
                  Password
                </label>
                <input
                  type="password"
                  value={password}
                  onChange={e => setPassword(e.target.value)}
                  placeholder="Enter your password"
                  required
                  disabled={loading}
                />
              </div>

              <button 
                type="submit" 
                className="btn" 
                style={{ width: '100%', marginBottom: '1rem' }}
                disabled={loading}
              >
                {loading ? 'Signing in...' : 'Sign In'}
              </button>
            </form>

            <div style={{ textAlign: 'center' }}>
              <p style={{ color: '#6c757d' }}>
                Don't have an account?{' '}
                <Link to="/signup" style={{ fontWeight: 'bold' }}>
                  Sign up
                </Link>
              </p>
            </div>
          </div>

          
        </div>
      </main>
    </div>
  )
}



// C:/Users/akars/OneDrive/Desktop/SwarPYCodes/Project_FNF/frontend_v3\pages\NewPost.jsx
import React, { useState, useEffect } from 'react'
import { useNavigate } from 'react-router-dom'
import api from '../api'
import Navbar from '../Components/Navbar'
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'

export default function NewPost() {
  const [title, setTitle] = useState('')
  const [blocks, setBlocks] = useState([]) // [{type:"text", content:"..."}, {type:"code", content:"..."}]
  const [input, setInput] = useState('')
  const [isCode, setIsCode] = useState(false)
  const [tags, setTags] = useState([])
  const [tagInput, setTagInput] = useState('')
  const [tagSuggestions, setTagSuggestions] = useState([])
  const [files, setFiles] = useState([])
  const [submitting, setSubmitting] = useState(false)
  const navigate = useNavigate()

  // üîπ Fetch tag suggestions
  useEffect(() => {
    if (!tagInput.trim()) {
      setTagSuggestions([])
      return
    }
    fetchTagSuggestions(tagInput)
  }, [tagInput])

  async function fetchTagSuggestions(query) {
    try {
      const res = await api.get(`/tags`)
      const allTags = res.data.$values ? res.data.$values : res.data
      const filtered = allTags.filter(t =>
        t.tagName.toLowerCase().includes(query.toLowerCase())
      )
      setTagSuggestions(filtered)
    } catch (err) {
      console.error('Failed to fetch tags:', err)
      setTagSuggestions([])
    }
  }

  function addBlock() {
    if (!input.trim()) return
    const newBlock = isCode
      ? { type: 'code', content: input }
      : { type: 'text', content: input }
    setBlocks([...blocks, newBlock])
    setInput('')
  }

  function removeBlock(index) {
    setBlocks(blocks.filter((_, i) => i !== index))
  }

  function handleFileChange(e) {
    const selectedFiles = Array.from(e.target.files)
    const maxSize = 10 * 1024 * 1024
    const validFiles = selectedFiles.filter(file => {
      if (file.size > maxSize) {
        alert(`File ${file.name} is too large. Max size is 10MB.`)
        return false
      }
      return true
    })
    setFiles(validFiles)
  }

  function removeFile(index) {
    setFiles(files.filter((_, i) => i !== index))
  }

  function addTag(tag) {
    if (!tags.includes(tag)) {
      setTags([...tags, tag])
    }
    setTagInput('')
    setTagSuggestions([])
  }

  function removeTag(tag) {
    setTags(tags.filter(t => t !== tag))
  }

  async function handleSubmit(e) {
    e.preventDefault()
    if (!title.trim() || blocks.length === 0) {
      alert('Please fill in title and content')
      return
    }

    try {
      setSubmitting(true)

      const formData = new FormData()
      formData.append('Title', title.trim())
      formData.append('Body', JSON.stringify(blocks))

      // Tags
      if (tags && tags.length > 0) {
        tags.forEach(tag => formData.append('Tags', tag))
      }

      // Attachments
      if (files && files.length > 0) {
        for (const file of files) {
          formData.append('Attachments', file)
        }
      }

      const res = await api.post('/posts', formData, {
        headers: { 'Content-Type': 'multipart/form-data' }
      })

      navigate(`/post/${res.data.postId}`)
    } catch (err) {
      console.error('Failed to create post:', err)
      alert('Failed to create post.')
    } finally {
      setSubmitting(false)
    }
  }

  return (
    <div>
      <Navbar />
      <main className="container" style={{ marginTop: '2rem' }}>
        <div className="flex justify-between items-center" style={{ marginBottom: '2rem' }}>
          <h1>Create New Post</h1>
          <button className="btn btn-outline" onClick={() => navigate('/feed')}>
            Cancel
          </button>
        </div>

        <form onSubmit={handleSubmit}>
          <div className="card">
            {/* Title */}
            <label style={{ fontWeight: 'bold' }}>Title *</label>
            <input
              type="text"
              placeholder="Enter a descriptive title"
              value={title}
              onChange={e => setTitle(e.target.value)}
              maxLength={200}
              required
            />
            <div style={{ fontSize: '0.8rem', color: '#6c757d', textAlign: 'right' }}>
              {title.length}/200
            </div>

            {/* Block Editor */}
            <div style={{ margin: '1rem 0' }}>
              <label style={{ fontWeight: 'bold' }}>Content *</label>
              <textarea
                rows={6}
                placeholder={isCode ? 'Write code snippet here...' : 'Write text content here...'}
                value={input}
                onChange={e => setInput(e.target.value)}
              />
              <div className="flex gap-2" style={{ marginTop: '0.5rem' }}>
                <button
                  type="button"
                  className="btn btn-outline"
                  onClick={() => setIsCode(!isCode)}
                >
                  {isCode ? 'Switch to Text' : 'Add Code Snippet'}
                </button>
                <button type="button" className="btn" onClick={addBlock}>
                  Add Block
                </button>
              </div>
            </div>

            {/* Preview */}
            {blocks.length > 0 && (
              <div className="card" style={{ background: '#f8f9fa', marginTop: '1rem' }}>
                {blocks.map((block, idx) =>
                  block.type === 'code' ? (
                    <div key={idx} style={{ marginBottom: '1rem' }}>
                      <SyntaxHighlighter language="javascript" showLineNumbers>
                        {block.content}
                      </SyntaxHighlighter>
                      <button
                        type="button"
                        className="btn btn-secondary"
                        onClick={() => removeBlock(idx)}
                      >
                        Remove
                      </button>
                    </div>
                  ) : (
                    <div key={idx} style={{ marginBottom: '0.5rem' }}>
                      <p>{block.content}</p>
                      <button
                        type="button"
                        className="btn btn-secondary"
                        onClick={() => removeBlock(idx)}
                        style={{ marginTop: '0.25rem' }}
                      >
                        Remove
                      </button>
                    </div>
                  )
                )}
              </div>
            )}

            {/* Tags */}
            <label style={{ fontWeight: 'bold', marginTop: '1rem' }}>Tags</label>
            <div style={{ position: 'relative' }}>
              <input
                type="text"
                placeholder="Type and select tags"
                value={tagInput}
                onChange={e => setTagInput(e.target.value)}
              />
              {tagSuggestions.length > 0 && (
                <ul
                  style={{
                    background: '#fff',
                    border: '1px solid #ddd',
                    borderRadius: '4px',
                    marginTop: '0.25rem',
                    maxHeight: '200px',
                    overflowY: 'auto',
                    position: 'absolute',
                    zIndex: 1000,
                    width: '100%'
                  }}
                >
                  {tagSuggestions.map(s => (
                    <li
                      key={s.tagId}
                      style={{ padding: '0.5rem', cursor: 'pointer' }}
                      onClick={() => addTag(s.tagName)}
                    >
                      {s.tagName}
                    </li>
                  ))}
                </ul>
              )}
            </div>
            <div style={{ marginTop: '0.5rem' }}>
              {tags.map((tag, idx) => (
                <span key={idx} className="tag">
                  {tag}{' '}
                  <button
                    type="button"
                    onClick={() => removeTag(tag)}
                    style={{ marginLeft: '0.25rem' }}
                  >
                    ‚úñ
                  </button>
                </span>
              ))}
            </div>

            {/* Attachments */}
            <label style={{ fontWeight: 'bold', marginTop: '1rem' }}>Attachments</label>
            <input type="file" multiple onChange={handleFileChange} />
            {files.length > 0 && (
              <ul>
                {files.map((f, i) => (
                  <li key={i}>
                    {f.name}{' '}
                    <button type="button" onClick={() => removeFile(i)}>
                      ‚úñ
                    </button>
                  </li>
                ))}
              </ul>
            )}

            {/* Submit */}
            <button
              type="submit"
              className="btn"
              disabled={submitting || !title.trim() || blocks.length === 0}
              style={{ marginTop: '1rem' }}
            >
              {submitting ? 'Creating Post...' : 'Create Post'}
            </button>
          </div>
        </form>
      </main>
    </div>
  )
}

// C:/Users/akars/OneDrive/Desktop/SwarPYCodes/Project_FNF/frontend_v3\pages\PostDetails.jsx

import React, { useEffect, useState } from 'react'
import { useParams, useNavigate } from 'react-router-dom'
import api from '../api'
import Navbar from '../Components/Navbar'
import dayjs from 'dayjs'
import relativeTime from 'dayjs/plugin/relativeTime'
import { isAuthenticated, getAuth } from '../utils/auth'
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'
import Comments from '../Components/Comments'

dayjs.extend(relativeTime)

export default function PostDetails() {
  const { id } = useParams()
  const navigate = useNavigate()
  const [post, setPost] = useState(null)
  const [loading, setLoading] = useState(true)
  const [voting, setVoting] = useState(false)
  const [editingPost, setEditingPost] = useState(false)
  const [postForm, setPostForm] = useState({ title: '', body: '', attachments: null, tags: [] })
  const [tagInput, setTagInput] = useState('')
  const auth = getAuth()

  useEffect(() => { fetchPost() }, [id])

  async function fetchPost() {
    try {
      setLoading(true)
      const res = await api.get(`/posts/${id}`)
      setPost(res.data)
      setPostForm({
        title: res.data.title || '',
        body: res.data.body || '',
        attachments: null,
        tags: res.data.tags || []
      })
    } catch (e) {
      if (e.response?.status === 404) navigate('/feed')
    } finally { setLoading(false) }
  }

  async function handleVote(type) {
    if (!isAuthenticated()) return navigate('/login')
    try {
      setVoting(true)
      await api.post(`/votes`, { postId: parseInt(id, 10), commentId: null, voteType: type })
      await fetchPost()
    } finally { setVoting(false) }
  }

  async function handleRepost() {
    if (!isAuthenticated()) return navigate('/login')
    try {
      await api.post(`/posts/${id}/repost`)
      alert('Post reposted!')
    } catch { alert('Repost failed') }
  }

  async function handleDeletePost() {
    // Only managers can delete posts
    
    // if (!isAuthenticated()) return navigate('/login')
    
    try {
      const msg = auth?.role === 'Manager'
      ? prompt('Enter commit message:')
      : 'User deleted own post'
      if (!msg) return
      await api.delete(`/posts/${id}?commitMessage=${encodeURIComponent(msg)}`)
      navigate('/feed')
    } catch (error) {
      if(error.response?.status === 403) {
        alert('You do not have permission to delete this post.Only managers can delete posts.')
      }
      else {
        alert('Failed to delete post.')
      }
      
    }
    
  }

  async function handleUpdatePost(e) {
    e.preventDefault()
    const msg = auth?.role === 'Manager' ? prompt('Enter commit message:') : null
    if (auth?.role === 'Manager' && !msg) return

    const formData = new FormData()
    formData.append('Title', postForm.title)
    formData.append('Body', postForm.body)
    if (postForm.attachments) {
      for (const file of postForm.attachments) formData.append('Attachments', file)
    }
    if (postForm.tags && postForm.tags.length > 0) {
      postForm.tags.forEach(t => formData.append('Tags', t))
    }

    const url = `/posts/${id}${msg ? `?commitMessage=${encodeURIComponent(msg)}` : ''}`
    await api.put(url, formData, { headers: { 'Content-Type': 'multipart/form-data' } })
    setEditingPost(false)
    fetchPost()
  }

  function addTag() {
    if (!tagInput.trim()) return
    if (!postForm.tags.includes(tagInput.trim())) {
      setPostForm({ ...postForm, tags: [...postForm.tags, tagInput.trim()] })
    }
    setTagInput('')
  }

  function removeTag(tag) {
    setPostForm({ ...postForm, tags: postForm.tags.filter(t => t !== tag) })
  }

  function renderBlocks(bodyJson) {
    if (!bodyJson) return <p>No content available</p>
    try {
      const blocks = typeof bodyJson === 'string' ? JSON.parse(bodyJson) : bodyJson
      if (!Array.isArray(blocks)) return <p>{bodyJson}</p>
      return blocks.map((b, i) =>
        b.type === 'code' ? (
          <div key={i} style={{ position: 'relative', marginBottom: '1rem' }}>
            <button className="btn btn-outline"
              style={{ position: 'absolute', right: '10px', top: '10px' }}
              onClick={() => navigator.clipboard.writeText(b.content)}>Copy Code</button>
            <SyntaxHighlighter language="python" showLineNumbers>{b.content}</SyntaxHighlighter>
          </div>
        ) : <p key={i} style={{ marginBottom: '1rem' }}>{b.content || ''}</p>
      )
    } catch { return <div className="markdown-content">{bodyJson}</div> }
  }

  if (loading) return <><Navbar /><div className="container loading"><p>Loading post...</p></div></>
  if (!post) return <><Navbar /><div className="container"><div className="card" style={{ textAlign: 'center' }}>
    <h2>Post not found</h2><button className="btn" onClick={() => navigate('/feed')}>Back to Feed</button>
  </div></div></>

  const isManager = auth?.role === 'Manager'
  const isOwner = String(post.userId) === String(auth?.userId)
  const canManagePost = isManager && String(auth?.departmentId) === String(post.deptId)

  return (
    <div>
      <Navbar />
      <main className="container" style={{ marginTop: '2rem' }}>
        <button className="btn btn-outline" onClick={() => navigate(-1)} style={{ marginBottom: '1rem' }}>‚Üê Back</button>
        <article className="card">
          {editingPost ? (
            <form onSubmit={handleUpdatePost}>
              <input value={postForm.title} onChange={e => setPostForm({ ...postForm, title: e.target.value })}
                style={{ width: '100%', marginBottom: '1rem' }} />
              <textarea value={postForm.body} onChange={e => setPostForm({ ...postForm, body: e.target.value })}
                rows={6} style={{ width: '100%' }} />
              <div style={{ margin: '0.5rem 0' }}>
                <input type="file" multiple onChange={e => setPostForm({ ...postForm, attachments: e.target.files })} />
              </div>
              <div style={{ margin: '0.5rem 0' }}>
                <input value={tagInput} onChange={e => setTagInput(e.target.value)} placeholder="Add tag" />
                <button type="button" className="btn btn-sm" onClick={addTag}>Add Tag</button>
                <div style={{ marginTop: '0.5rem' }}>
                  {postForm.tags.map(t => (
                    <span key={t} className="tag" onClick={() => removeTag(t)} style={{ cursor: 'pointer' }}>{t} ‚úï</span>
                  ))}
                </div>
              </div>
              <div className="flex gap-2" style={{ marginTop: '0.5rem' }}>
                <button type="submit" className="btn">Save</button>
                <button type="button" className="btn btn-outline" onClick={() => setEditingPost(false)}>Cancel</button>
              </div>
            </form>
          ) : (
            <>
              <header style={{ marginBottom: '1.5rem', borderBottom: '1px solid #e9ecef', paddingBottom: '1rem' }}>
                <h1>{post.title}</h1>
                <div className="flex justify-between items-center">
                  <div>
                    <strong>{post.authorName}</strong>{post.department && <span> ‚Ä¢ {post.department}</span>}
                    <div style={{ fontSize: '0.85rem', color: '#6c757d' }}>
                      {dayjs(post.createdAt).format('MMMM D, YYYY h:mm A')} ({dayjs(post.createdAt).fromNow()})
                    </div>
                  </div>
                  {isAuthenticated() &&
                    <div className="flex gap-2">
                      <button className="btn btn-outline" onClick={handleRepost}>üîÑ Repost</button>


                          <button className="btn btn-outline" onClick={() => navigate(`/edit/${post.postId}`)}>‚úè Edit</button>
                          <button className="btn btn-outline" onClick={handleDeletePost}>üóë Delete</button>
                        
                    </div>}
                </div>
                {post.tags?.length > 0 &&
                  <div style={{ marginTop: '1rem' }}>{post.tags.map((t, i) => <span key={i} className="tag">{t}</span>)}</div>}
              </header>
              <div className="markdown-content">{renderBlocks(post.bodyPreview || post.body)}</div>
            </>
          )}

          {post.attachments?.length > 0 &&
            <div style={{ marginTop: '2rem', padding: '1rem', background: '#f8f9fa', borderRadius: '6px' }}>
              <h3>Attachments</h3>
              <ul style={{ listStyle: 'none', padding: 0 }}>
                {post.attachments.map(f => {
                  const url = `http://localhost:5157/${f.filePath}`
                  const isImg = /\.(jpg|jpeg|png|gif|webp)$/i.test(f.fileName)
                  return <li key={f.attachmentId} style={{ marginBottom: '1rem' }}>
                    {isImg
                      ? <img src={url} alt={f.fileName} style={{ maxWidth: '100%', borderRadius: '6px' }} />
                      : <a href={url} target="_blank" rel="noreferrer">üìé {f.fileName}</a>}
                  </li>
                })}
              </ul>
            </div>}
          <footer style={{ marginTop: '2rem', padding: '1rem', background: '#f8f9fa', borderRadius: '6px' }}>
            <div className="flex justify-between items-center">
              <div className="flex gap-4">
                <button className="btn btn-outline" onClick={() => handleVote('Upvote')}
                  disabled={voting || !isAuthenticated()}>‚ñ≤ {post.upvoteCount || 0}</button>
                <button className="btn btn-outline" onClick={() => handleVote('Downvote')}
                  disabled={voting || !isAuthenticated()}>‚ñº {post.downvoteCount || 0}</button>
              </div>
              <div style={{ fontSize: '0.85rem', color: '#6c757d' }}>üí¨ {post.commentsCount || 0} comments</div>
            </div>
          </footer>
        </article>
        <Comments postId={post.postId} canManagePost={canManagePost} auth={auth} />
      </main>
    </div>
  )
}



// C:/Users/akars/OneDrive/Desktop/SwarPYCodes/Project_FNF/frontend_v3\pages\Profile.jsx

import React, { useEffect, useState } from 'react'
import { useNavigate } from 'react-router-dom'
import api from '../api'
import Navbar from '../Components/Navbar'
import PostCard from '../Components/PostCard'
import { getAuth } from '../utils/auth'

export default function Profile() {
  const [profile, setProfile] = useState(null)
  const [userPosts, setUserPosts] = useState([])
  const [stats, setStats] = useState(null)
  const [loading, setLoading] = useState(true)
  const [activeTab, setActiveTab] = useState('posts')
  const navigate = useNavigate()
  const auth = getAuth()

  useEffect(() => {
    fetchProfile()
    fetchUserPosts()
    fetchStats()
  }, [])

  async function fetchProfile() {
    try {
      const response = await api.get('/users/me')
      setProfile(response.data)
    } catch (error) {
      console.error('Failed to fetch profile:', error)
    }
  }

  async function fetchUserPosts() {
    try {
      const response = await api.get('/posts/mine')
      setUserPosts(response.data)
    } catch (error) {
      console.error('Failed to fetch user posts:', error)
      setUserPosts([])
    }
  }

  async function fetchStats() {
  try {
    const response = await api.get('/users/me/stats')
    setStats(response.data)
  } catch (error) {
    console.error('Failed to fetch stats:', error)
    // Fallback to calculating from posts if API fails
    setStats({
      totalPosts: userPosts.length,
      totalUpvotes: userPosts.reduce((sum, post) => sum + (post.upvoteCount || 0), 0),
      totalDownvotes: userPosts.reduce((sum, post) => sum + (post.downvoteCount || 0), 0),
      totalCommentsReceived: userPosts.reduce((sum, post) => sum + (post.commentsCount || 0), 0),
      totalCommitsMade: 0
    })
  } finally {
    setLoading(false)
  }
}

  if (loading) {
    return (
      <div>
        <Navbar />
        <div className="container loading">
          <p>Loading profile...</p>
        </div>
      </div>
    )
  }

  return (
    <div>
      <Navbar />
      
      <main className="container" style={{ marginTop: '2rem' }}>
        <div className="card">
          <div className="flex gap-4 items-center">
            <div style={{ 
              width: '80px', 
              height: '80px', 
              borderRadius: '50%', 
              background: profile?.profilePicture ? `url("http://localhost:5157/${profile.profilePicture}")` : '#007bff',
              backgroundSize: 'contain',
              backgroundPosition: 'center',
              backgroundRepeat: 'no-repeat',
              overflow: 'hidden',
              display: 'flex',
              // alignItems: 'center',
              justifyContent: 'center',
              color: 'white',
              fontSize: '2rem',
              fontWeight: 'bold'
            }}>
              {!profile?.profilePicture && (profile?.fullName?.[0] || auth.fullName?.[0] || '?')}
            </div>
            
            <div style={{ flex: 1 }}>
              <h1 style={{ marginBottom: '0.25rem' }}>
                {profile?.fullName || auth.fullName || 'Unknown User'}
              </h1>
              <p style={{ color: '#6c757d', marginBottom: '0.5rem' }}>
                {profile?.email || 'No email provided'}
              </p>
              {profile?.department && (
                <p style={{ color: '#6c757d', fontSize: '0.9rem' }}>
                  {profile.department} Department
                </p>
              )}
            </div>

            <button 
              className="btn btn-outline"
              onClick={() => navigate('/profile/edit')}
            >
              Edit Profile
            </button>
          </div>
        </div>

        {/* Stats Cards */}
      <div style={{ 
        display: 'grid', 
        gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', 
        gap: '1rem',
        marginBottom: '2rem'
      }}>
        <div className="card" style={{ textAlign: 'center' }}>
          <h3 style={{ color: '#007bff', fontSize: '2rem', marginBottom: '0.5rem' }}>
            {stats?.totalPosts || 0}
          </h3>
          <p style={{ color: '#6c757d' }}>Posts Created</p>
        </div>
        
        <div className="card" style={{ textAlign: 'center' }}>
          <h3 style={{ color: '#28a745', fontSize: '2rem', marginBottom: '0.5rem' }}>
            {stats?.totalUpvotes || 0}
          </h3>
          <p style={{ color: '#6c757d' }}>Total Upvotes</p>
        </div>
        
        <div className="card" style={{ textAlign: 'center' }}>
          <h3 style={{ color: '#ffc107', fontSize: '2rem', marginBottom: '0.5rem' }}>
            {stats?.totalCommentsReceived || 0}
          </h3>
          <p style={{ color: '#6c757d' }}>Comments Received</p>
        </div>
        
        <div className="card" style={{ textAlign: 'center' }}>
          <h3 style={{ color: '#6f42c1', fontSize: '2rem', marginBottom: '0.5rem' }}>
            {stats?.totalCommitsMade || 0}
          </h3>
          <p style={{ color: '#6c757d' }}>Commits Made</p>
        </div>
          
        </div>

        {/* Tabs */}
        <div className="card">
          <div className="flex gap-4" style={{ borderBottom: '1px solid #e9ecef', marginBottom: '1.5rem' }}>
            <button
              className={`btn ${activeTab === 'posts' ? '' : 'btn-outline'}`}
              style={{ borderRadius: '0', borderBottom: activeTab === 'posts' ? '2px solid #007bff' : 'none' }}
              onClick={() => setActiveTab('posts')}
            >
              My Posts ({userPosts.length})
            </button>
            
            
          </div>

          {/* Tab Content */}
          {activeTab === 'posts' && (
            <div>
              {userPosts.length === 0 ? (
                <div style={{ textAlign: 'center', padding: '3rem' }}>
                  <h3>No posts yet</h3>
                  <p style={{ color: '#6c757d', marginBottom: '1rem' }}>
                    You haven't created any posts. Share your knowledge with the team!
                  </p>
                  <button className="btn" onClick={() => navigate('/new')}>
                    Create Your First Post
                  </button>
                </div>
              ) : (
                <div>
                  {userPosts.map(post => (
                    <PostCard key={post.postId} post={post} />
                  ))}
                </div>
              )}
            </div>
          )}

          
        </div>
      </main>
    </div>
  )
}

// C:/Users/akars/OneDrive/Desktop/SwarPYCodes/Project_FNF/frontend_v3\pages\ProfileEdit.jsx

import React, { useEffect, useState } from 'react'
import { useNavigate } from 'react-router-dom'
import Navbar from '../Components/Navbar'
import api from '../api'

export default function ProfileEdit() {
  const [profile, setProfile] = useState(null)
  const [fullName, setFullName] = useState('')
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [departmentId, setDepartmentId] = useState('')
  const [newFile, setNewFile] = useState(null)
  const [preview, setPreview] = useState(null)
  const [loading, setLoading] = useState(false)

  const navigate = useNavigate()

  useEffect(() => {
    fetchProfile()
  }, [])

  useEffect(() => {
    if (!newFile) {
      setPreview(null)
      return
    }
    const url = URL.createObjectURL(newFile)
    setPreview(url)
    return () => URL.revokeObjectURL(url)
  }, [newFile])

  async function fetchProfile() {
    try {
      const res = await api.get('/users/me')
      setProfile(res.data)
      setFullName(res.data.fullName || '')
      setEmail(res.data.email || '')
      setDepartmentId(res.data.departmentId || '')
    } catch (err) {
      console.error(err)
      alert('Unable to load profile')
    }
  }

  async function handleSave(e) {
    e.preventDefault()
    setLoading(true)
    try {
      const fd = new FormData()
      if (fullName) fd.append('FullName', fullName)
      if (email) fd.append('Email', email)
      if (password) fd.append('Password', password)
      if (departmentId) fd.append('DepartmentId', departmentId)
      if (newFile) fd.append('ProfilePicture', newFile)

      const res = await api.put('/users/update-profile', fd)
      alert('Profile updated')
      navigate('/profile')
    } catch (err) {
      console.error(err)
      alert(err?.response?.data?.message || 'Update failed')
    } finally {
      setLoading(false)
    }
  }

  return (
    <div>
      <Navbar />
      <main className="container" style={{ marginTop: '2rem' }}>
        <form className="card" onSubmit={handleSave} encType="multipart/form-data">
          <h2 className="mb-3">Edit Profile</h2>

          <div
            style={{
              display: 'flex',
              gap: '1rem',
              alignItems: 'center',
              marginBottom: '1rem',
            }}
          >
            <div
              style={{
                width: 80,
                height: 80,
                borderRadius: '50%',
                backgroundColor: profile?.profilePicture ? 'transparent' : '#007bff',
                backgroundImage: profile?.profilePicture
                  ? `url("http://localhost:5157/${profile.profilePicture}")`
                  : 'none',
                backgroundSize: 'cover',
                backgroundPosition: 'center',
                backgroundRepeat: 'no-repeat',
              }}
            />
            <div>
              <input
                type="file"
                accept="image/*"
                onChange={e => setNewFile(e.target.files?.[0] ?? null)}
              />
              {preview && (
                <img
                  src={preview}
                  alt="new"
                  style={{ width: 48, height: 48, borderRadius: 24, marginTop: 8 }}
                />
              )}
            </div>
          </div>

          <label>Full Name</label>
          <input
            type="text"
            value={fullName}
            onChange={e => setFullName(e.target.value)}
          />

          <label>Email</label>
          <input
            type="email"
            value={email}
            onChange={e => setEmail(e.target.value)}
          />

          <label>New Password (leave blank to keep)</label>
          <input
            type="password"
            value={password}
            onChange={e => setPassword(e.target.value)}
          />

          <label>Department</label>
          <input
            type="number"
            value={departmentId}
            onChange={e => setDepartmentId(e.target.value)}
          />

          <button className="btn mt-3" type="submit" disabled={loading}>
            {loading ? 'Saving...' : 'Save Profile'}
          </button>
        </form>
      </main>
    </div>
  )
}

// C:/Users/akars/OneDrive/Desktop/SwarPYCodes/Project_FNF/frontend_v3\pages\Signup.jsx
import React, { useState, useEffect } from 'react'
import { useNavigate } from 'react-router-dom'
import api from '../api'
import Navbar from '../Components/Navbar'
import { saveAuth } from '../utils/auth'

export default function Signup() {
  const [fullName, setFullName] = useState('')
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [confirmPassword, setConfirmPassword] = useState('')
  const [departmentId, setDepartmentId] = useState('')
  const [profileFile, setProfileFile] = useState(null)
  const [previewUrl, setPreviewUrl] = useState(null)
  const [loading, setLoading] = useState(false)

  const navigate = useNavigate()

  useEffect(() => {
    if (!profileFile) {
      setPreviewUrl(null)
      return
    }
    const url = URL.createObjectURL(profileFile)
    setPreviewUrl(url)
    return () => URL.revokeObjectURL(url)
  }, [profileFile])

  async function handleSubmit(e) {
    e.preventDefault()
    if (password !== confirmPassword) {
      alert('Passwords do not match')
      return
    }

    setLoading(true)
    try {
      const formData = new FormData()
      formData.append('FullName', fullName.trim())
      formData.append('Email', email.trim())
      formData.append('Password', password)
      if (departmentId) formData.append('DepartmentId', departmentId)
      if (profileFile) formData.append('ProfilePicture', profileFile)

      const res = await api.post('/auth/register', formData)
      saveAuth(res.data)
      navigate('/feed')
    } catch (err) {
      console.error(err)
      alert(err?.response?.data?.message || 'Signup failed')
    } finally {
      setLoading(false)
    }
  }

  return (
    <div>
      <Navbar />
      <main className="container" style={{ marginTop: '4rem' }}>
        <form
          className="card"
          onSubmit={handleSubmit}
          encType="multipart/form-data"
        >
          <h2 className="mb-3">Create Account</h2>

          <label>Full Name</label>
          <input
            type="text"
            value={fullName}
            onChange={e => setFullName(e.target.value)}
            required
          />

          <label>Email</label>
          <input
            type="email"
            value={email}
            onChange={e => setEmail(e.target.value)}
            required
          />

          <label>Password</label>
          <input
            type="password"
            value={password}
            onChange={e => setPassword(e.target.value)}
            required
          />

          <label>Confirm Password</label>
          <input
            type="password"
            value={confirmPassword}
            onChange={e => setConfirmPassword(e.target.value)}
            required
          />

          <label>Department </label>
          <input
            type="number"
            value={departmentId}
            onChange={e => setDepartmentId(e.target.value)}
          />

          <label>Profile Picture (optional)</label>
          <input
            type="file"
            accept="image/*"
            onChange={e => setProfileFile(e.target.files?.[0] ?? null)}
          />
          {previewUrl && (
            <img
              src={previewUrl}
              alt="preview"
              style={{
                width: 80,
                height: 80,
                borderRadius: '50%',
                marginTop: 8,
              }}
            />
          )}

          <button className="btn mt-3" type="submit" disabled={loading}>
            {loading ? 'Signing up...' : 'Sign up'}
          </button>
        </form>
      </main>
    </div>
  )
}

// C:/Users/akars/OneDrive/Desktop/SwarPYCodes/Project_FNF/frontend_v3\utils\auth.js

export function saveAuth({ token, userId, role, departmentId, profilePicture, fullName }) {
  localStorage.setItem('fnf_token', token)
  localStorage.setItem('fnf_userId', userId)
  localStorage.setItem('fnf_role', role)
  if(departmentId)localStorage.setItem('fnf_departmentId', departmentId)   // üîπ added
  if (profilePicture) localStorage.setItem('fnf_profile', profilePicture)
  if (fullName) localStorage.setItem('fnf_fullName', fullName)
}

export function logout() {
  localStorage.clear()
}

export function getAuth() {
  return {
    token: localStorage.getItem('fnf_token'),
    userId: localStorage.getItem('fnf_userId'),
    role: localStorage.getItem('fnf_role'),
    departmentId: localStorage.getItem('fnf_departmentId'),   // üîπ added
    profile: localStorage.getItem('fnf_profile'),
    fullName: localStorage.getItem('fnf_fullName')
  }
}

export function isAuthenticated() {
  return !!localStorage.getItem('fnf_token')
}

